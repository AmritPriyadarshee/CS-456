#!/usr/bin/python
import struct
import sys
import socket
from threading import Thread 
import thread
import time
from SocketServer import ThreadingMixIn 


threads = 0
uploads_list = []
downloads_list = []
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #TCP
host = 0
not_terminate = True

class key_struct():
	def __init__(self, conn, key, ip, port, size, wait):
		self.conn = conn
		self.key = key
		self.ip = ip
		self.port = port
		self.size = size
		self.wait = wait


'''Forward the data directly to the downloader'''
def exchange_data(upload_struct, download_struct):
	global threads
	'''Read from uploader and if data exists, send it to the downloader'''
	buffer_size = download_struct.size

	while True:
		data, address = (upload_struct.conn).recvfrom(buffer_size)
		if (data):
			(download_struct.conn).send(data)
			time.sleep((float(upload_struct.wait)/1000))

		else:
			(download_struct.conn).close()
			(upload_struct.conn).close()
			break

	threads = threads - 1
	return


def setup_socket():
	global not_terminate
	global threads

	'''sock.bind(IP, Port)'''
	sock.bind(('', 0)) #0 means OS assigned port
	port_num = sock.getsockname() #e.g. 50997

	'''Print and write port number to file'''
	port_file = open('port', 'w')
	port_file.write(str(port_num[1]))
	port_file.close()


	print(port_num[1])
	print(socket.getfqdn()) #ubuntu1604-006.student.cs.uwaterloo.ca
	sock.listen(15)

	while True:
		#client_sock is the object that will be used to send/receive data
		client_sock, client_addr = sock.accept()
		data = client_sock.recvfrom(17)

		header = struct.unpack('!9sIi', data[0])

		size = header[1]
		wait = header[2]
		header=header[0]
		'''This info will be used to determine what to do with the incoming connection'''
		command = header[0] #G/P/F  
		key = header[1:]    #aaaaaaaa
		ip = client_addr[0] #129.97.167.26
		port = client_addr[1] #50927

		storage_info = key_struct(client_sock, key, ip, port, size, wait)

		if (not_terminate == False):
			print ("Rejecting connection")
			continue

		'''Close all waiting uploading connections'''
		if (command == 'F'):
			not_terminate = False

			for waiting_upload in uploads_list:
				(waiting_upload.conn).close()
			for waiting_download in downloads_list:
				(waiting_download.conn).close()

			while (threads != 0):
				time.sleep(1)
			return

		'''Determine what to do with the connection'''
		if (command == 'G' and not_terminate): #If we're trying to DL, check uploads
			for element in uploads_list:
				if (element.key == key):
					'''Call multithreading function to enable the file exchange'''
					threads = threads + 1
					thread.start_new_thread(exchange_data, (element, storage_info))
					uploads_list.remove(element)
					break

			else:
				downloads_list.append(storage_info)

		if (command == 'P' and not_terminate): #If we're trying to DL, check uploads
			for element in downloads_list:
				if (element.key == key):
					'''Call multithreading function to enable the file exchange'''
					threads = threads + 1
					thread.start_new_thread(exchange_data, (storage_info, element))
					downloads_list.remove(element)
					break

			else:
				uploads_list.append(storage_info)

setup_socket()
